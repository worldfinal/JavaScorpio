package com.hsbc.frc.SevenHero;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.OutputStreamWriter;import java.net.CookiePolicy;import java.net.URI;import java.net.URISyntaxException;import java.net.URLEncoder;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Timer;import org.apache.http.Header;import org.apache.http.HttpEntity;import org.apache.http.HttpHost;import org.apache.http.HttpResponse;import org.apache.http.NameValuePair;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.CookieStore;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.client.params.ClientPNames;import org.apache.http.client.protocol.ClientContext;import org.apache.http.client.utils.URIBuilder;import org.apache.http.cookie.Cookie;import org.apache.http.impl.client.BasicCookieStore;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.cookie.BasicClientCookie;import org.apache.http.message.BasicNameValuePair;import org.apache.http.protocol.BasicHttpContext;import org.apache.http.protocol.HttpContext;import org.apache.log4j.Level;import org.apache.log4j.Logger;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.nodes.Node;import org.jsoup.select.Elements;import com.hsbc.frc.SevenHero.beans.Hero;import com.hsbc.frc.SevenHero.beans.Heros;import com.hsbc.frc.SevenHero.beans.Period;import com.hsbc.frc.SevenHero.beans.Running_time;import com.hsbc.frc.SevenHero.beans.SevenHeroConfig;public class ScorpioHero extends BaseHero implements Runnable {  private Hero hero;	private Timer timer;	private String logonUrl = "";	private String exitUrl = "";	private Element qq_loginform = null;	private DefaultHttpClient httpclient = null;	private Document homeDoc = null;	private OutputStream os = null;	public static void main(String args[]) {		log.debug("ddddddddddd");				ScorpioHero sh = new ScorpioHero();		Hero hero = new Hero();		hero.setNumber("2573944001");		hero.setPassword("fengrenchang");		hero.setDelay(5);		Period period = new Period();		period.setFrom(0);		period.setTo(24);		Running_time rt = new Running_time();		rt.setPeriod(period);		hero.setRunning_time(rt);				sh.setHero(hero);		sh.init();	}	private void process() {		try {			httpclient = createHttpClient(hero.getNumber());			open7x();			openSecond();			logon();			// logonGd11();			atHome();//			httpclient.getConnectionManager().shutdown();		} catch (IOException e) {			try {				printLog("exit: " + exitUrl);				sendGetRequest(exitUrl);			} catch (IOException e1) {				this.log.error(e1);			}//			httpclient.getConnectionManager().shutdown();			e.printStackTrace();		} catch (URISyntaxException e) {			try {				printLog("exit: " + exitUrl);				sendGetRequest(exitUrl);			} catch (IOException e1) {				this.log.error(e1);			}//			httpclient.getConnectionManager().shutdown();						this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private int isProcess() {		int delay = getDelay(hero.getNumber());		if (delay <= 0) {			printLog("不再暂停一次");			return (int) hero.getDelay();		}		long hour = new Date().getHours();		Period period = hero.getRunning_time().getPeriod();		if (period.getFrom() < period.getTo()) {			if (hour >= period.getFrom() && hour < period.getTo()) {				return delay;			}		} else if (period.getFrom() > period.getTo()) {			if (hour >= period.getTo() || hour < period.getFrom()) {				return delay;			}		} else {					}		return 0;	}	public void init() {		if (timer != null) {			// timer.cancel();		}		if (os == null) {			try {				String fileName = String.format("c:\\7xlog\\%s\\%s.log",						hero.getNumber(), hero.getNumber());				File file = new File(String.format("c:\\7xlog\\%s",						hero.getNumber()));				file.mkdir();				os = new FileOutputStream(new File(fileName), true);			} catch (FileNotFoundException e) {				e.printStackTrace();			}		}		printLog("init();");		httpclient = createHttpClient(hero.getNumber());		int delay = isProcess();		if (delay == 0) {			printLog(String.format("[%s] DO NOTHING", hero.getNumber()));		} else if (delay > 0) {			process();		}						if (timer != null) {			timer.cancel();		}				SevenHeroConfig shc = BaseHero.readXML();		Heros heros = shc.getHeros();				for (int i = 0; i < heros.getHeroCount(); i++) {			Hero newhero = heros.getHero(i);			if (newhero.getNumber().equals(hero.getNumber())) {				newhero.setName(hero.getName());				timer = new Timer();				Main main = new Main(newhero, timer);				main.setPeriod((int)newhero.getDelay());								if (delay <= 0) {					delay = 20;				}				newhero.setDelay(delay);				timer.schedule(main, newhero.getDelay() * 60 * 1000 + 2 * 1000, 24 * 60 * 60 * 1000);				printLog(String.format("[%s] start timer [delay:%d]\r\nend();", 						newhero.getNumber(), newhero.getDelay()));				BaseHero.saveXML(shc);				break;			}		}	}	public void atHome() throws IOException {		Element tips = homeDoc.select("p.tips").first();				List<Node> homeList = tips.childNodes();		for (int i = 0; i < homeList.size(); i++) {			Node node = homeList.get(i);			if (node.nodeName().equals("#text")) {				String txt = node.outerHtml();				if (txt.contains("LV.")) {					hero.setName(txt.replaceAll("&nbsp;", " "));					printLog(String.format("[%s] Logon successfully!! ", hero.getName()));				}			}		}				Elements links = tips.select("a");		String eventUrl = "";		for (int i = 0; i < links.size(); i++) {			Element link = links.get(i);			String text = link.text();			String url = link.attr("href");			if (url.length() > 500) {				printLog("!!!!!!!!!!!!!!!!!!!!" + url.length());				continue;			}			if (Constant.HOME_WAPGIFT.equals(text)) {				printLog(text + " " + url);				sendGetRequest(url);			} else if (Constant.HOME_GAIN.equals(text)) {				printLog(text + " " + url);				sendGetRequest(url);			} else if (Constant.HOME_VIEW.equals(text)					&& url.contains("pid=luckHome")) {				eventUrl = url;			} else if (Constant.HOME_HARVEY.equals(text)) {				printLog(text + " " + url);				sendGetRequest(url);			} else if (Constant.HOME_TASK.equals(text)) {				completeTask(url);			} else if (Constant.HOME_BUILD.equals(text)) {				completeBuild(url);			} else if (Constant.HOME_FARM.equals(text)) {				completeFarm(url);			} else if (Constant.HOME_TRAIN.equals(text)) {				completeTrain(url);			} else if (Constant.HOME_GUILD.equals(text)) {				completeGuild(url);			} else if (Constant.HOME_HARVEYTREE.equals(text)) {				printLog(text + " " + url);				sendGetRequest(url);			} else if (Constant.HOME_HEATEGG.equals(text)) {				sendGetRequest(url);			}		}		if (eventUrl.equals("") == false) {			completeEvent(eventUrl);		}		sleep(200);		Element exit = homeDoc.select(				String.format("a:contains(%s)", Constant.HOME_EXIT)).first();		if (exit != null) {			exitUrl = exit.attr("href");			printLog(String.format("[%s] bye bye: %s", hero.getNumber(), exitUrl));			printLog("exit: " + exitUrl);			sendGetRequest(exitUrl);		} else {			printLog("Fail to find the EXIT link");		}	}	private void completeGuild(String url) {		try {			String htmlString = sendGetRequest(url);			Document doc = Jsoup.parse(htmlString);			String jqStr = String.format("a:contains(%s)",					Constant.GUILD_START_TRADE);			Element link = doc.select(jqStr).first();			if (link != null) {				startTrade(link.attr("href"));			}			jqStr = String.format("a:contains(%s)", Constant.GUILD_GAIN_ALL);			link = doc.select(jqStr).first();			if (link != null) {				sendGetRequest(link.attr("href"));				printLog("联盟祈福 ");			}			jqStr = String.format("a:contains(%s)", Constant.GUILD_GAIN);			link = doc.select(jqStr).last();			if (link != null) {				sendGetRequest(link.attr("href"));				printLog("联盟福利 ");			}			jqStr = String.format("a:contains(%s)", Constant.GUILD_ENTER);			link = doc.select(jqStr).first();			if (link != null) {				donate(link.attr("href"));			}		} catch (IOException e) {			printLog(" [exception in completeGuild] " + url);			e.printStackTrace();		}	}	private void donate(String url) {		try {			String htmlString = sendGetRequest(url);			Document doc = Jsoup.parse(htmlString);			Element tips = doc.select("p.tips").first();			List<Node> list = tips.childNodes();			List<Integer> money = new ArrayList<Integer>();			for (int i = 0; i < list.size(); i++) {				Node node = list.get(i);				if (node.nodeName().equals("#text")) {					String text = node.outerHtml();					for (int j = 0; j < text.length(); j++) {						if (text.charAt(j) >= '0' && text.charAt(j) <= '9') {							int x = 0;							while (text.charAt(j) >= '0'									&& text.charAt(j) <= '9') {								x *= 10;								x += (text.charAt(j) - '0');								j++;							}							money.add(x);						}					}				}			}			int foodNum = 0;			int woodNum = 0;			int stoneNum = 0;			int bronzeNum = 0;			if (money.get(0) > money.get(1) / 2) {				foodNum = money.get(0) - money.get(1) / 2;			}			if (money.get(2) > money.get(3) / 2) {				woodNum = money.get(2) - money.get(3) / 2;			}			if (money.get(4) > money.get(5) / 2) {				stoneNum = money.get(4) - money.get(5) / 2;			}			if (money.get(6) > money.get(7) / 2) {				bronzeNum = money.get(6) - money.get(7) / 2;			}			if (foodNum + woodNum + stoneNum + bronzeNum == 0) {				printLog("不用捐");			}		} catch (IOException e) {			printLog(" [exception in startTrade] " + url);			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private void startTrade(String url) {		try {			String htmlString = sendGetRequest(url);			Document doc = Jsoup.parse(htmlString);			String jqStr = String.format("a:contains(%s)",					Constant.GUILD_CONFIRM_TRADE);			Element link = doc.select(jqStr).first();			if (link != null) {				sendGetRequest(link.attr("href"));				printLog("开始跑商");			} else {				printLog("开始跑商失败，找不到连接");			}		} catch (IOException e) {			printLog(" [exception in startTrade] " + url);			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private void completeTrain(String url) {		try {			String htmlString = sendGetRequest(url);			writeFile(htmlString, "completeTrain.log");			Document doc = Jsoup.parse(htmlString);			Element tips = doc.select("p.tips").first();			Elements links = tips.select("a");			for (int i = 0; i < links.size(); i++) {				Element link = links.get(i);				String text = link.text();				String href = link.attr("href");				if (text.contains(Constant.TRAIN_ALLPRACTICE)) {					trainAll(href);				} else if (text.contains(Constant.TRAIN_LINGWU)) {					String html = sendGetRequest(href);					Document lingwuDoc = Jsoup.parse(html);					String jqStr = String.format("a:contains(%s)",							Constant.TRAIN_ALLLINGWU);					Element button = lingwuDoc.select(jqStr).first();					if (button != null) {						lingwuAll(button.attr("href"));					}				}			}		} catch (IOException e) {			printLog(" [exception in completeTrain] " + url);			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private void trainAll(String url) {		try {			String htmlString = sendGetRequest(url);			Document doc = Jsoup.parse(htmlString);			String jqStr = String.format("a:contains(%s)",					Constant.TRAIN_ALLPRACTICE_1HOUR);			Element link = doc.select(jqStr).first();			if (link != null) {				sendGetRequest(link.attr("href"));				printLog("修炼1小时");			} else {				printLog("修炼1小时失败，找不到连接");			}		} catch (IOException e) {			printLog(" [exception in trainAll] " + url);			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private void lingwuAll(String url) {		try {			String htmlString = sendGetRequest(url);			Document doc = Jsoup.parse(htmlString);			String jqStr = String.format("a:contains(%s)",					Constant.TRAIN_ALLLINGWU_1HOUR);			Element link = doc.select(jqStr).first();			if (link != null) {				sendGetRequest(link.attr("href"));				printLog("领悟1小时");			} else {				printLog("领悟1小时失败，找不到连接");			}		} catch (IOException e) {			printLog(" [exception in trainAll] " + url);			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private void completeFarm(String url) {		try {			String htmlString = sendGetRequest(url);			writeFile(htmlString, "completeFarm.log");			Document doc = Jsoup.parse(htmlString);			Element tips = doc.select("p.tips").first();			String farmString = tips.outerHtml();			writeFile(farmString, "farmString.log");			Elements links = tips.select("a");			for (int i = 0; i < links.size(); i++) {				Element link = links.get(i);				String text = link.text();				String href = link.attr("href");				if (text.contains(Constant.FARM_FEED)) {					String html = sendGetRequest(href);					printLog("喂食");				} else if (text.contains(Constant.FARM_FEED)) {					String html = sendGetRequest(href);					printLog("喂食");				} else if (text.contains(Constant.FARM_WATER)) {					String html = sendGetRequest(href);					Document farmDoc = Jsoup.parse(html);					Elements water = farmDoc.select("a:contains(浇水)");					for (int j = 0; j < water.size(); j++) {						String waterUrl = water.get(j).attr("href");						sendGetRequest(waterUrl);						printLog("浇水");					}				}			}		} catch (IOException e) {			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private void completeBuild(String url) {		try {			List<ScorpioBuilding> buildingList = new ArrayList<ScorpioBuilding>();			String htmlString = sendGetRequest(url);			writeFile(htmlString, "building.log");			Document doc = Jsoup.parse(htmlString);			Element tips = doc.select("p.tips").first();			Element addBuildCard = tips.select("a:contains(增加建筑排程)").first();			if ("true".equals(hero.getAddBuildingCard()) && addBuildCard != null) {				htmlString = sendGetRequest(addBuildCard.attr("href"));				doc = Jsoup.parse(htmlString);				Element use = doc.select("a:contains(使用)").first();				if (use != null) {					printLog("增加建筑排程!");					sendGetRequest(use.attr("href"));				}			}			Element detailBuild = tips.select("a:contains(详细建筑列表)").first();			if (detailBuild != null) {				htmlString = sendGetRequest(detailBuild.attr("href"));				doc = Jsoup.parse(htmlString);				tips = doc.select("p.tips").first();				addBuilding(tips.childNodes(), buildingList);								Elements homeviewDetails = tips.select(String.format(						"a:contains(%s)", Constant.BUILD_VIEWDETAIL));				for (int j = 0; j < homeviewDetails.size(); j++) {					Element viewDetail = homeviewDetails.get(j);					String html = sendGetRequest(viewDetail.attr("href"));					Document detailDoc = Jsoup.parse(html);					Element detailTips = detailDoc.select("p.tips")							.first();					if (detailTips != null) {						addBuilding(detailTips.childNodes(),								buildingList);					}				}				Elements links = tips.select("a");				for (int i = 0; i < links.size(); i++) {					Element link = links.get(i);					if (link.text().contains("东部")							|| link.text().contains("西部")							|| link.text().contains("南部")							|| link.text().contains("北部")) {						String html = sendGetRequest(link.attr("href"));						Document buildDoc = Jsoup.parse(html);						Element buildTips = buildDoc.select("p.tips").first();						addBuilding(buildTips.childNodes(), buildingList);						Elements viewDetails = buildTips.select(String.format(								"a:contains(%s)", Constant.BUILD_VIEWDETAIL));						for (int j = 0; j < viewDetails.size(); j++) {							Element viewDetail = viewDetails.get(j);							html = sendGetRequest(viewDetail.attr("href"));							Document detailDoc = Jsoup.parse(html);							Element detailTips = detailDoc.select("p.tips")									.first();							if (detailTips != null) {								addBuilding(detailTips.childNodes(),										buildingList);							}						}					}				}				Collections.sort(buildingList,						new Comparator<ScorpioBuilding>() {							@Override							public int compare(ScorpioBuilding x,									ScorpioBuilding y) {								if (x.getText().contains("署")) {									return -1;								} else if (y.getText().contains("署")) {									return 1;								}								return x.getLevel() - y.getLevel();							}						});				int j = 0;				for (int i = 0; i < buildingList.size(); i++) {					ScorpioBuilding sb = buildingList.get(i);					if (i > 0) {						ScorpioBuilding presb = buildingList.get(i-1);						if (presb.getText().equals(sb.getText())) {							continue;						}					}					// System.out.println("Level "+sb.getLevel() + " " +					// sb.getText() + " " + sb.getUrl());					if (j < 5) {						String html = sendGetRequest(sb.getUrl());						Document buildDoc = Jsoup.parse(html);						Element confirm = buildDoc.select("a:contains(确定升级)")								.first();						if (confirm != null) {							String confirmBuild = sendGetRequest(confirm.attr("href"));							writeFile(confirmBuild, String.format("%s_%s_LV.%d.log", 									hero.getNumber(), sb.getText(), sb.getLevel()));														if (confirmBuild.contains(Constant.BUILD_ERR_FULL)) {								printLog(Constant.BUILD_ERR_FULL);								break;							} else if (confirmBuild.contains(Constant.BUILD_SUCCESS)) {								printLog("build successfully: " + sb.getText() + "  Level "										+ sb.getLevel());								j++;							} else {								printLog("资源不足 build fail: " + sb.getText() + "  Level "										+ sb.getLevel());							}						}					}				}			}		} catch (IOException e) {			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private void addBuilding(List<Node> nodeList,			List<ScorpioBuilding> buildingList) {		for (int i = 0; i < nodeList.size(); i++) {			Node node = nodeList.get(i);			// System.out.println(i + "_" + node.nodeName() + "_" +			// node.outerHtml());			if (node.nodeName().equals("#text")					&& node.outerHtml().contains("等级")) {				int j = i + 1;				for (j = i + 1; j < nodeList.size(); j++) {					Node link = nodeList.get(j);					if (link.nodeName().equals("a")							&& link.outerHtml().contains("升级")) {						ScorpioBuilding sb = new ScorpioBuilding();						sb.setUrl(link.attr("href"));						String nodehtml = node.outerHtml().replaceAll(" ", "")								.replace("&nbsp;", "");						int idx = nodehtml.indexOf("等级:");						String level = nodehtml.substring(idx + "等级:".length());						sb.setLevel(Integer.parseInt(level.trim()));						sb.setText(nodehtml.substring(0, idx));						buildingList.add(sb);						break;					}				}				i = j - 1;			}		}	}	private void completeEvent(String url) {		try {			List<String> eventUrl = new ArrayList<String>();			List<Integer> eventStatus = new ArrayList<Integer>();			String htmlString = sendGetRequest(url);			Document doc = Jsoup.parse(htmlString);			Element tips = doc.select("p.tips").first();			List<Node> tipsChildren = tips.childNodes();			for (int i = 0; i < tipsChildren.size(); i++) {				Node node = tipsChildren.get(i);				if (node.nodeName().equals("#text")) {					String text = node.outerHtml();					if (text.contains("您有") && text.contains("事件")) {						printLog(node.outerHtml());						if (text.contains("忌")) {							eventStatus.add(0);						} else {							eventStatus.add(1);						}					}				}			}			Elements links = tips.getElementsByTag("a");			for (int i = 0; i < links.size(); i++) {				Element link = links.get(i);				String text = link.text();				String href = link.attr("href");				if (text.contains("处理") || text.contains("放弃")) {					eventUrl.add(href);				}			}			if (eventStatus.size() > 0					&& eventStatus.size() * 2 == eventUrl.size()) {				for (int i = 0; i < eventStatus.size(); i++) {					String href = "";					if (eventStatus.get(i) == 0) {						href = eventUrl.get(i * 2 + 1);						printLog("放弃");					} else {						href = eventUrl.get(i * 2);						printLog("处理");					}					sendGetRequest(href);				}			}		} catch (IOException e) {			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	private void completeTask(String url) {		try {			String htmlString = sendGetRequest(url);			writeFile(htmlString, "completeTask.log");			Document doc = Jsoup.parse(htmlString);			Element tips = doc.select("p.tips").first();			List<Node> tipsChildren = tips.childNodes();			int np;			for (int i = 0; i < tipsChildren.size(); i++) {				Node node = tipsChildren.get(i);				if (node.nodeName().equals("#text")) {					String text = node.outerHtml();					if (text.contains("君主行动力:")) {						int idx = text.indexOf("君主行动力:") + "君主行动力:".length();						String power = text.substring(idx);						np = Integer.parseInt(power);						printLog("君主行动力: " + np);					}				}			}			Element link = tips.select("a:contains(执行)").first();			if (link != null) {				htmlString = sendGetRequest(link.attr("href"));				doc = Jsoup.parse(htmlString);				Element confirm = doc.select("a:contains(我要执行)").first();				sendGetRequest(confirm.attr("href"));			}		} catch (IOException e) {			this.log.error(hero.getNumber() + "\r\n" + e);		}	}	public void open7x() throws IOException {		HttpGet httpget = new HttpGet(Constant.beforeLogonUrl);		buildHttpGet(httpget);		HttpResponse response = httpclient.execute(httpget);		// printLog("[open7x] Status code: " +		// response.getStatusLine().getStatusCode());		String htmlResponse = getHTMLresponse(response);		sid = getSid(htmlResponse, "&");		// parseLogonActionUrl(htmlResponse);		httpget.releaseConnection();	}	public void openSecond() throws IOException {		CookieStore cookieStore = new BasicCookieStore();		HttpContext localContext = new BasicHttpContext();		localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);		// HttpHost targetHost = new HttpHost("pt.3g.qq.com");		String url = Constant.openUrl + "&" + sid;		HttpGet httpget = new HttpGet(url);		buildHttpGet(httpget);		HttpResponse response = httpclient.execute(httpget);		String htmlResponse = getHTMLresponse(response);		parseLogonActionUrl(htmlResponse);		httpget.releaseConnection();	}	public void logon() throws URISyntaxException, IOException {		CookieStore cookieStore = new BasicCookieStore();		HttpContext localContext = new BasicHttpContext();		localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);		String url = logonUrl;		String loginurl = "";		String param = "";		Elements inputs = qq_loginform.getElementsByTag("input");		HttpHost targetHost = new HttpHost("pt.3g.qq.com");		// builder.setScheme("http").setHost("pt.3g.qq.com").setPath("/");		List<NameValuePair> list = new ArrayList<NameValuePair>();		for (int i = 0; i < inputs.size(); i++) {			String name = inputs.get(i).attr("name");			String value = inputs.get(i).attr("value");			// value = URLEncoder.encode(value, "utf-8");			if ("qq".equals(name)) {				value = hero.getNumber();			} else if ("pwd".equals(name)) {				value = hero.getPassword();//				value = URLEncoder.encode(value, "utf-8");			} else if ("login_url".equals(name)) {				// loginurl = value;				// continue;			} else if ("loginTitle".equals(name)) {				// value = "%E6%89%8B%E6%9C%BA%E8%85%BE%E8%AE%AF%E7%BD%91";			} else if ("loginsubmit".equals(name)) {				// value = "%E7%99%BB%E5%BD%95";			}			NameValuePair n1 = new BasicNameValuePair(name, value);			list.add(n1);			param += "&" + name + "=" + value;		}		NameValuePair n1 = new BasicNameValuePair("loginType", "3");		list.add(n1);		// param += "&login_url=" + loginurl;		// url += param;		URIBuilder builder = new URIBuilder(url);		URI uri = builder.build();		HttpPost httppost = new HttpPost(uri);		HttpEntity requestHttpEntity = new UrlEncodedFormEntity(list);		httppost.setEntity(requestHttpEntity);		buildHttpPost(httppost);		HttpResponse response = httpclient.execute(targetHost, httppost);		String htmlString = getHTMLresponse(response);		Header header = response.getLastHeader("location");		httppost.releaseConnection();		if (header != null) {			printLog("Location: " + header.getValue());			// sid = getSid(header.getValue(), "&");			htmlString = sendGetRequest(header.getValue());			writeFile(htmlString, "Location.log");		} else {			printLog("Location is null");		}		Document doc = Jsoup.parse(htmlString);		Element logon = doc.select(				String.format("a:contains(%s)", Constant.LOGON_GD11)).first();		if (logon != null) {			printLog("gd11: " + logon.attr("href"));			String html = sendGetRequest(logon.attr("href"));			writeFile(html, "GD11.log");			homeDoc = Jsoup.parse(html);		} else {			printLog("Logon link does not exist");			throw new IOException();		}	}	public void logonGd11() throws IOException {		CookieStore cookieStore = new BasicCookieStore();		HttpContext localContext = new BasicHttpContext();		localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);		String url = Constant.logonGD11Url + sid;		HttpHost targetHost = new HttpHost("dg.7.3g.qq.com");		HttpGet httpget = new HttpGet(url);		buildHttpGet(httpget);		HttpResponse response = httpclient.execute(targetHost, httpget);		// printLog("[logonGd11] Status code: " +		// response.getStatusLine().getStatusCode());		String htmlString = getHTMLresponse(response);		homeDoc = Jsoup.parse(htmlString);		httpget.releaseConnection();	}	public Hero getHero() {		return hero;	}	public void setHero(Hero hero) {		this.hero = hero;	}	public Timer getTimer() {		return timer;	}	public void setTimer(Timer timer) {		this.timer = timer;	}	private void printLog(String log) {		synchronized (lock) {			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");			String date = sdf.format(new Date());			String newLog = String.format("[%s][%s] %s\r\n", 					date, hero.getName(), log);			// System.out.print(newLog);			this.log.info(String.format("[%s %s] %s",					hero.getNumber(), hero.getName(), log));			try {				os.write(newLog.getBytes());			} catch (IOException e) {				this.log.error(hero.getNumber() + "\r\n" + e);			}		}	}	public void parseLogonActionUrl(String htmlString) {		Document doc = Jsoup.parse(htmlString);		qq_loginform = doc.getElementById("qq_loginform");		logonUrl = qq_loginform.attr("action");	//	System.out.println(logonUrl);		// printLog(logonUrl);	}	public String sendGetRequest(String url) throws IOException {		if (url == null || url.length() == 0) {			return "";		} else if (url.length() > 500) {			printLog("!!--" + url.length() + " " + url);			return "";		}		sleep(500);		HttpGet httpget = new HttpGet(url);		buildHttpGet(httpget);		HttpResponse response;		try {			response = httpclient.execute(httpget);			String html = getHTMLresponse(response);			httpget.releaseConnection();			return html;		} catch (ClientProtocolException e) {			System.out.println("!!--" + url.length() + " " + url);			printLog("!!--" + url.length() + " " + url);			this.log.error(hero.getNumber() + "\r\n" + e);			throw e;		} catch (IOException e) {			System.out.println("!!--" + url.length() + " " + url);			printLog("!!--" + url.length() + " " + url);			this.log.error(hero.getNumber() + "\r\n" + e);			throw e;		}	}	protected void writeFile(String logs, String fileName) {		synchronized (lock) {			File dir = new File(String.format("C:\\7xlog\\%s", hero.getNumber()));			dir.mkdir();			File file = new File(String.format("C:\\7xlog\\%s\\%s", hero.getNumber(), fileName));			try {				FileOutputStream fos = new FileOutputStream(file);				OutputStreamWriter os = new OutputStreamWriter(fos, "UTF-8");				os.write(logs); 				os.flush();				os.close();			} catch (FileNotFoundException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}			}	@Override	public void run() {		init();	}}